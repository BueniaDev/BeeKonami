cmake_minimum_required(VERSION 3.10)
project(beekonami)

# Require C++17 (and position independent code)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(BUILD_AUDIO "Build the audio cores." ON)
option(BUILD_VIDEO "Build the video cores." ON)
option(BUILD_MACHINE "Build the machine cores." ON)

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif()

if (BUILD_VIDEO)
	option(BUILD_VIDEO_TESTS "Build the test suite for the video cores." OFF)
endif()

if (BUILD_AUDIO)
	option(BUILD_AUDIO_TESTS "Build the test suite for the audio cores." OFF)
endif()

if (BUILD_MACHINE)
	option(BUILD_MACHINE_TESTS "Build the test suite for the machine cores." OFF)
endif()

add_library(beekonami INTERFACE)

if (BUILD_AUDIO)
	add_subdirectory(BeeKonami/audio)
	target_link_libraries(beekonami INTERFACE beekonami-audio)
endif()

if (BUILD_VIDEO)
	add_subdirectory(BeeKonami/video)
	target_link_libraries(beekonami INTERFACE beekonami-video)
endif()

if (BUILD_MACHINE)
	add_subdirectory(BeeKonami/machine)
	target_link_libraries(beekonami INTERFACE beekonami-machine)
endif()

add_library(libbeekonami ALIAS beekonami)

if (BUILD_VIDEO_TESTS)
	add_subdirectory(tests/video)
endif()

if (BUILD_AUDIO_TESTS)
	add_subdirectory(tests/audio)
endif()

if (BUILD_MACHINE_TESTS)
	add_subdirectory(tests/machine)
endif()

if (WIN32)
    message(STATUS "Operating system is Windows.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	target_compile_options(beekonami INTERFACE -Wall)
	message(STATUS "Compiler is MinGW.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL MSVC)
	message(WARNING "MSVC support is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
	target_compile_options(beekonami INTERFACE /W4)
	message(STATUS "Compiler is MSVC.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	message(WARNING "Clang support on Windows is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
	target_compile_options(beekonami INTERFACE -Wall)
	message(STATUS "Compiler is Clang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif(UNIX AND NOT APPLE)
    message(STATUS "Operating system is Linux.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	target_compile_options(beekonami INTERFACE -Wall)
	message(STATUS "Compiler is GCC.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	target_compile_options(beekonami INTERFACE -Wall)
	message(STATUS "Compiler is Clang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif(APPLE)
    message(STATUS "Operating system is Mac.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL AppleClang)
	target_compile_options(beekonami INTERFACE -Wall)
	message(STATUS "Compiler is AppleClang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
else()
    message(SEND_ERROR "Operating system not supported.")
    return()
endif()